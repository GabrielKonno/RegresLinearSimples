# -*- coding: utf-8 -*-
"""Regressão_Linear_Simples_Sklearn_Exer

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tSsktd_k-k3pheL4CDBLK7deaKPH-dkT
"""

import pandas as pd
import numpy as np
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

import statsmodels.formula.api as smf

df = pd.read_excel('aprovacao_alunos.xlsx')
df.head()

df.corr()

df.describe()

df.info()

sns.histplot(data=df, x='ano_2015', kde=True)

sns.histplot(data=df, x='ano_2016', kde=True)

sns.regplot(x = "ano_2015",
            y = "ano_2016",
            data = df)

scaler = MinMaxScaler()

df_normal = pd.DataFrame(scaler.fit_transform(df), index=df.index, columns=df.columns)

df_normal.head()

df_normal.describe()

sns.histplot(data=df_normal, x='ano_2015', kde=True)

sns.histplot(data=df_normal, x='ano_2016', kde=True)

sns.regplot(x = "ano_2015",
            y = "ano_2016",
            data = df_normal)

scaler = StandardScaler()

df_std = pd.DataFrame(scaler.fit_transform(df), index=df.index, columns=df.columns)

df_std.head()

df_std.describe()

sns.histplot(data=df_std, x='ano_2015', kde=True)

sns.histplot(data=df_std, x='ano_2016', kde=True)

sns.regplot(x = "ano_2015",
            y = "ano_2016",
            data = df_std)

#modelo MRLS
function = 'ano_2016~ano_2015-1'
model = smf.ols(formula=function, data=df_normal).fit()
print(model.summary())

x = df_normal[["ano_2015"]]

y = df_normal[["ano_2016"]]

#Separando os dados de Treino e Teste
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

#Criando um Objeto de Regressão Linear
lr = LinearRegression()

#Treinando o Modelo
lr.fit(x_train,y_train)

r_sq = lr.score(x_train, y_train)
print('Coeficiente de Determinação (R²):', r_sq)

y_pred_train = lr.predict(x_train)
print('MAE:', metrics.mean_absolute_error(y_train, y_pred_train))
print('MSE:', metrics.mean_squared_error(y_train, y_pred_train))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_train, y_pred_train)))

y_pred = lr.predict(x_test)
print('MAE:', metrics.mean_absolute_error(y_test, y_pred))
print('MSE:', metrics.mean_squared_error(y_test, y_pred))
print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

